nodeB_0 = x_train_aug[y_train_aug == 0]
nodeB_1 = x_train_aug[y_train_aug == 1]
nodeB_2 = x_train_aug[y_train_aug == 2]

#plt.hist(x_train_aug.flatten(order='C'), bins='auto')

print("Training")
print("Num of nodeB_0:", nodeB_0.shape[0], "\nNum of nodeB_1:", nodeB_1.shape[0], "\nNum of nodeB_2:", nodeB_2.shape[0], "\n")
 
for k in range(2):
    nodeB_0 = nodeB_0 + np.random.normal(0, 3, nodeB_0.shape)
    x_train_aug = np.append(x_train_aug, nodeB_0, 0)
    y_train_aug = np.append(y_train_aug, np.zeros(nodeB_0.shape[0]))
    
N_nodeB_0 = np.count_nonzero(y_train_aug == 0)

print("Enlargin NB1 by: ", N_nodeB_0//nodeB_1.shape[0])
for k in range(N_nodeB_0//nodeB_1.shape[0]):
    nodeB_1 = nodeB_1 + np.random.normal(0, k//3, nodeB_1.shape)
    x_train_aug = np.append(x_train_aug, nodeB_1, 0)
    y_train_aug = np.append(y_train_aug, np.ones(nodeB_1.shape[0]))

print("Enlargin NB2 by: ", N_nodeB_0//nodeB_2.shape[0])
for k in range(N_nodeB_0//nodeB_2.shape[0]):
    nodeB_2 = nodeB_2 + np.random.normal(0, k//3, nodeB_2.shape)
    x_train_aug = np.append(x_train_aug, nodeB_2, 0)
    y_train_aug = np.append(y_train_aug, 2 * np.ones(nodeB_2.shape[0]))    
    
    
print("Final size of dataset: ", x_train_aug.shape)
nodeB_0 = x_train_aug[y_train_aug == 0]
x_train_aug = np.append(x_train_aug, apply_frequency_selective_fading_db(nodeB_0, -5, 5), 0)
y_train_aug = np.append(y_train_aug, 0 * np.ones(nodeB_0.shape[0]))   
    
i = 0
plt.figure(figsize=(8, 4))
sns.heatmap(x_train_aug[i], cmap='viridis')
plt.title(f"Train Sample n. {i} - Label: {int(y_train_aug[i])}")
plt.xlabel("Time samples (48)")
plt.ylabel("Subcarriers (72)")
plt.show()
    
plt.figure() 
plt.hist(x_train_aug[y_train_aug == 0].flatten(order='C'), bins='auto')
plt.hist(x_train_aug[y_train_aug == 1].flatten(order='C'), bins='auto')
plt.hist(x_train_aug[y_train_aug == 2].flatten(order='C'), bins='auto')

print("Enlarged dataset")
print("Num of nodeB_0:", np.count_nonzero(y_train_aug == 0), "\nNum of nodeB_1:", np.count_nonzero(y_train_aug == 1), "\nNum of nodeB_2:", np.count_nonzero(y_train_aug == 2), "\n")

print("Final size of dataset: ", x_train_aug.shape)
print("Final size of labels: ", y_train_aug.shape)